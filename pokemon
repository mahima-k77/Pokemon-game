
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

class Pokemon {
    private String name;
    private String type;
    private int health;
    private int attack;
    private int defence;
    private int specialAttack;
    private int specialDefence;
    private int speed;
    private int level;
    private int experience;
    private List<Move> moves;
    private boolean isWild;

    public Pokemon(String name, String type, int health, int attack, int defence, int specialAttack, int specialDefence, int speed, int level, boolean isWild) {
        this.name = name;
        this.type = type;
        this.health = health;
        this.attack = attack;
        this.defence = defence;
        this.specialAttack = specialAttack;
        this.specialDefence = specialDefence;
        this.speed = speed;
        this.level = level;
        this.experience = 0;
        this.moves = new ArrayList<>();
        this.isWild = isWild;
    }

    public void attack(Pokemon opponent, Move move) {
        if (new Random().nextInt(100) < move.getAccuracy()) {
            int damage = calculateDamage(move, opponent);
            opponent.takeDamage(damage);
        } else {
            System.out.println(move.getName() + " missed!");
        }
    }

    private int calculateDamage(Move move, Pokemon opponent) {
        int damage = (move.getCategory().equals("physical") ? this.attack : this.specialAttack) + move.getPower() - opponent.defence;
       
        return Math.max(damage, 0); 
    }

    public void takeDamage(int damage) {
        this.health -= damage;
        if (this.health <= 0) {
            this.health = 0;
            System.out.println(this.name + " fainted!");
        }
    }

    public void gainExperience(int exp) {
        this.experience += exp;
        if (this.experience >= level * 100) { 
            levelUp();
        }
    }

    private void levelUp() {
        this.level++;
        this.health += 10;
        this.attack += 5;
        this.defence += 5;
        this.specialAttack += 5;
        this.specialDefence += 5;
        this.speed += 5;
        System.out.println(this.name + " leveled up to " + this.level + "!");
    }

    public void learnMove(Move move) {
        if (this.moves.size() < 4) {
            this.moves.add(move);
        } else {
            System.out.println(this.name + " cannot learn more than 4 moves.");
        }
    }

    public int getStat(String stat) {
        switch (stat.toLowerCase()) {
            case "health": return health;
            case "attack": return attack;
            case "defence": return defence;
            case "specialattack": return specialAttack;
            case "specialdefence": return specialDefence;
            case "speed": return speed;
            case "level": return level;
            case "experience": return experience;
            default: throw new IllegalArgumentException("Invalid stat: " + stat);
        }
    }

    
}

class Move {
    private String name;
    private String type;
    private int power;
    private int accuracy;
    private String category;
    private String effect;

    public Move(String name, String type, int power, int accuracy, String category, String effect) {
        this.name = name;
        this.type = type;
        this.power = power;
        this.accuracy = accuracy;
        this.category = category;
        this.effect = effect;
    }

    public void applyEffect(Pokemon target) {
       
    }

    public String getName() {
        return name;
    }

    public int getPower() {
        return power;
    }

    public int getAccuracy() {
        return accuracy;
    }

    public String getCategory() {
        return category;
    }

  
}

class Trainer {
    private String name;
    private List<Pokemon> team;
    private List<Item> inventory;

    public Trainer(String name) {
        this.name = name;
        this.team = new ArrayList<>();
        this.inventory = new ArrayList<>();
    }

    public void catchPokemon(Pokemon wildPokemon) {
        if (wildPokemon.isWild) {
           
            this.team.add(wildPokemon);
            wildPokemon.isWild = false;
            System.out.println(this.name + " caught " + wildPokemon.getName() + "!");
        }
    }

    public void useItem(Item item, Pokemon target) {
        item.use(target);
    }

    public void battle(Trainer opponent) {
       
    }

   
}

class Item {
    private String name;
    private String type;
    private String effect;

    public Item(String name, String type, String effect) {
        this.name = name;
        this.type = type;
        this.effect = effect;
    }

    public void use(Pokemon target) {
        
    }


}

public class Main {
    public static void main(String[] args) {
       
        Pokemon pikachu = new Pokemon("Pikachu", "Electric", 35, 55, 40, 50, 50, 90, 5, true);
        Move thunderbolt = new Move("Thunderbolt", "Electric", 90, 100, "special", "Paralyze");
        pikachu.learnMove(thunderbolt);

        Pokemon charmander = new Pokemon("Charmander", "Fire", 39, 52, 43, 60, 50, 65, 5, true);

        Trainer ash = new Trainer("Ash");
        ash.catchPokemon(pikachu);

        ash.useItem(new Item("Potion", "Healing", "Restores 20 HP"), pikachu);

        pikachu.attack(charmander, thunderbolt);
    }
}


